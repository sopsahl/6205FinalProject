.start.
    / Initialize base address and array size
    addi r01, r00, x1           / x1 = 1 for decrementing
    addi r10, r00, x0          / x10 = base_addr = 0
    addi r11, r00, x02b         / x11 = n = 10 (array size)

    / Initialize outer loop index i
    addi r12, r00, x0          / x12 = i = 0

.outer.
    sub r31, r11, r01        / x31 = n - 1
    bge  r12, r31, .end. / if i >= n - 1, exit

    / Initialize inner loop index j
    addi r13, r00, x0          / x13 = j = 0

.inner.
    sub   r31, r11, r12      / x31 = n - i
    sub  r31, r31, r01       / x31 = n - i - 1
    bge   r13, r31, .inci.  / if j >= n - i - 1, increment i

    / Calculate address of A[j]
    slli  r16, r13, x2        / x16 = j * 4
    add   r17, r10, r16      / x17 = base_addr + (j * 4)
    lw    r14, r17, x0      / r14 = A[j]

    / Calculate address of A[j+1]
    addi  r18, r13, x1        / x18 = j + 1
    slli  r16, r18, x2        / x16 = (j + 1) * 4
    add   r17, r10, r16      / x17 = base_addr + ((j + 1) * 4)
    lw    r15, r17, x0        / x15 = A[j+1]

    / Compare A[j] and A[j+1]
    blt   r14, r15, .incj. / if A[j] < A[j+1], skip swapping

    / Swap A[j] and A[j+1]
    / Store A[j+1] into A[j]
    slli  r16, r13, x2        / x16 = j * 4
    add   r17, r10, r16      / x17 = base_addr + (j * 4)
    sw    r15, r17, x0        / A[j] = A[j+1]

    / Store A[j] into A[j+1]
    slli  r16, r18, x2        / x16 = (j + 1) * 4
    add   r17, r10, r16      / x17 = base_addr + ((j + 1) * 4)
    sw    r14, r17, x0        / A[j+1] = A[j]

.incj.
    addi  r13, r13, x1        / j = j + 1
    jal   r00, .inner.     / Jump to inner_loop

.inci.
    addi  r12, r12, x1        / i = i + 1
    jal   r00, .outer.     / Jump to outer_loop

.end.